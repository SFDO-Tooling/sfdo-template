version: 2.1
jobs:
  build:
    working_directory: ~/{{cookiecutter.project_slug}}
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - restore_cache:
          keys:
            - {{cookiecutter.project_slug}}-py-{% raw %}{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/test.txt" }}-{{ checksum "requirements/local.txt" }}{% endraw %}
      - restore_cache:
          keys:
            - {{cookiecutter.project_slug}}-npm-{% raw %}{{ checksum "yarn.lock" }}{% endraw %}
      - run:
          name: Install Node & Yarn
          command: ./bin/unpack-node
      - run:
          name: Set $PATH
          command: |
            echo 'export PATH=~/{{cookiecutter.project_slug}}/node_modules/.bin:$PATH' >> $BASH_ENV
            echo 'export PATH=~/{{cookiecutter.project_slug}}/node/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Install Dependencies
          command: |
            yarn install --frozen-lockfile
            python3 -m venv venv
            . venv/bin/activate
            pip install -Ur requirements/local.txt
      - run:
          name: Compile Front-End Assets
          command: yarn prod
      - persist_to_workspace:
          root: .
          paths:
            - ./venv
            - ./node_modules
            - ./node
      - save_cache:
          key: {{cookiecutter.project_slug}}-py-{% raw %}{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/test.txt" }}-{{ checksum "requirements/local.txt" }}{% endraw %}
          paths:
            - ./venv
      - save_cache:
          key: {{cookiecutter.project_slug}}-npm-{% raw %}{{ checksum "yarn.lock" }}{% endraw %}
          paths:
            - ./node_modules

  lint:
    working_directory: ~/{{cookiecutter.project_slug}}
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Set $PATH
          command: |
            echo 'export PATH=~/{{cookiecutter.project_slug}}/node_modules/.bin:$PATH' >> $BASH_ENV
            echo 'export PATH=~/{{cookiecutter.project_slug}}/node/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Lint
          command: |
            . venv/bin/activate
            yarn lint

  test-client:
    working_directory: ~/{{cookiecutter.project_slug}}
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Set $PATH
          command: |
            echo 'export PATH=~/{{cookiecutter.project_slug}}/node_modules/.bin:$PATH' >> $BASH_ENV
            echo 'export PATH=~/{{cookiecutter.project_slug}}/node/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Test JS
          command: yarn test:coverage
      - store_artifacts:
          path: coverage
          destination: js-reports
      - store_test_results:
          path: coverage
      - persist_to_workspace:
          root: .
          paths:
            - coverage

  test-python:
    working_directory: ~/{{cookiecutter.project_slug}}
    docker:
      - image: circleci/python:3.7.4
        environment:
          BUCKETEER_AWS_ACCESS_KEY_ID: circle_test
          BUCKETEER_AWS_SECRET_ACCESS_KEY: circle_test
          BUCKETEER_BUCKET_NAME: circle_test
          DATABASE_URL: postgres://ubuntu@localhost:5432/circle_test
          DB_ENCRYPTION_KEY: ynlw7Du-bwA8EL0gons5cSFjH_7ZY-gZdTaVAFYIEUc=
          DJANGO_DEBUG: False
          DJANGO_HASHID_SALT: test_hash_id
          DJANGO_SECRET_KEY: test_secret_key
          DJANGO_SETTINGS_MODULE: config.settings.test
          SECURE_SSL_REDIRECT: False
      - image: circleci/redis:latest
      - image: circleci/postgres:latest
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: circle_test{% if cookiecutter.use_bucketeer_aws_for_file_storage == 'y' %}
          AWS_BUCKET_NAME: None
          AWS_SECRET_ACCESS_KEY: None
          AWS_ACCESS_KEY_ID: None{% endif %}
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install Dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Run Database Migrations
          command: |
            . venv/bin/activate
            python ./manage.py migrate --no-input
      - run:
          name: Test Python
          command: |
            . venv/bin/activate
            pytest --junitxml=pycov/pytest-junit.xml
      - store_artifacts:
          path: htmlcov
          destination: py-reports
      - store_test_results:
          path: pycov
      - persist_to_workspace:
          root: .
          paths:
            - .coverage

  report-test-coverage:
    working_directory: ~/{{cookiecutter.project_slug}}
    docker:
      - image: circleci/python:3.7.4
    environment:
      COVERALLS_PARALLEL: true
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Set $PATH
          command: |
            echo 'export PATH=~/{{cookiecutter.project_slug}}/node_modules/.bin:$PATH' >> $BASH_ENV
            echo 'export PATH=~/{{cookiecutter.project_slug}}/node/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Report Test Coverage
          command: |
            . venv/bin/activate
            yarn pytest:report-coverage
            yarn test:report-coverage
            curl -k "https://coveralls.io/webhook?repo_token=${COVERALLS_REPO_TOKEN}" -d "payload[build_num]=${CIRCLE_BUILD_NUM}&payload[status]=done"
      - run:
          name: Check Test Coverage
          command: |
            . venv/bin/activate
            yarn pytest:check-coverage
            yarn test:check-coverage

  build-docs:
    working_directory: ~/{{cookiecutter.project_slug}}
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build Documentation
          command: |
            . venv/bin/activate
            cd docs
            make html

workflows:
  version: 2
  build-and-test:
    jobs:
      - build
      - lint:
          requires:
            - build
      - test-client:
          requires:
            - build
      - test-python:
          requires:
            - build
      - build-docs:
          requires:
            - build
      - report-test-coverage:
          requires:
            - test-client
            - test-python
